
#![allow(clippy::upper_case_acronyms)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _REGEX_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NEWLINE: u32 = 4;
pub const REG_NOSUB: u32 = 8;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const TRACE_SEQ_BUF_SIZE: u32 = 4096;
pub const DEBUG_RECORD: u32 = 0;
pub const TEP_PRINT_INFO: &'static [u8; 5usize] = b"INFO\0";
pub const TEP_PRINT_INFO_RAW: &'static [u8; 9usize] = b"INFO_RAW\0";
pub const TEP_PRINT_COMM: &'static [u8; 5usize] = b"COMM\0";
pub const TEP_PRINT_LATENCY: &'static [u8; 8usize] = b"LATENCY\0";
pub const TEP_PRINT_NAME: &'static [u8; 5usize] = b"NAME\0";
pub const TEP_PRINT_PID: u32 = 1;
pub const TEP_PRINT_TIME: u32 = 2;
pub const TEP_PRINT_CPU: u32 = 3;
pub const TEP_FILTER_ERROR_BUFSZ: u32 = 1024;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const TRACEFS_DYNEVENT_ALL: u32 = 4294967295;
pub const TRACEFS_HIST_TIMESTAMP: &'static [u8; 17usize] = b"common_timestamp\0";
pub const TRACEFS_HIST_TIMESTAMP_USECS: &'static [u8; 23usize] = b"common_timestamp.usecs\0";
pub const TRACEFS_HIST_CPU: &'static [u8; 4usize] = b"cpu\0";
pub const TRACEFS_HIST_COUNTER: &'static [u8; 12usize] = b"__COUNTER__\0";
pub const TRACEFS_HIST_HITCOUNT: &'static [u8; 9usize] = b"hitcount\0";
pub const TRACEFS_TIMESTAMP: &'static [u8; 17usize] = b"common_timestamp\0";
pub const TRACEFS_TIMESTAMP_USECS: &'static [u8; 23usize] = b"common_timestamp.usecs\0";
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __re_size_t = ::std::os::raw::c_uint;
pub type __re_long_size_t = ::std::os::raw::c_ulong;
pub type s_reg_t = ::std::os::raw::c_long;
pub type active_reg_t = ::std::os::raw::c_ulong;
pub type reg_syntax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub static mut re_syntax_options: reg_syntax_t;
}
pub const reg_errcode_t__REG_ENOSYS: reg_errcode_t = -1;
pub const reg_errcode_t__REG_NOERROR: reg_errcode_t = 0;
pub const reg_errcode_t__REG_NOMATCH: reg_errcode_t = 1;
pub const reg_errcode_t__REG_BADPAT: reg_errcode_t = 2;
pub const reg_errcode_t__REG_ECOLLATE: reg_errcode_t = 3;
pub const reg_errcode_t__REG_ECTYPE: reg_errcode_t = 4;
pub const reg_errcode_t__REG_EESCAPE: reg_errcode_t = 5;
pub const reg_errcode_t__REG_ESUBREG: reg_errcode_t = 6;
pub const reg_errcode_t__REG_EBRACK: reg_errcode_t = 7;
pub const reg_errcode_t__REG_EPAREN: reg_errcode_t = 8;
pub const reg_errcode_t__REG_EBRACE: reg_errcode_t = 9;
pub const reg_errcode_t__REG_BADBR: reg_errcode_t = 10;
pub const reg_errcode_t__REG_ERANGE: reg_errcode_t = 11;
pub const reg_errcode_t__REG_ESPACE: reg_errcode_t = 12;
pub const reg_errcode_t__REG_BADRPT: reg_errcode_t = 13;
pub const reg_errcode_t__REG_EEND: reg_errcode_t = 14;
pub const reg_errcode_t__REG_ESIZE: reg_errcode_t = 15;
pub const reg_errcode_t__REG_ERPAREN: reg_errcode_t = 16;
pub type reg_errcode_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_pattern_buffer {
    pub __buffer: *mut re_dfa_t,
    pub __allocated: __re_long_size_t,
    pub __used: __re_long_size_t,
    pub __syntax: reg_syntax_t,
    pub __fastmap: *mut ::std::os::raw::c_char,
    pub __translate: *mut ::std::os::raw::c_uchar,
    pub re_nsub: usize,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl Default for re_pattern_buffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl re_pattern_buffer {
    #[inline]
    pub fn __can_be_null(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___can_be_null(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __regs_allocated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set___regs_allocated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __fastmap_accurate(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___fastmap_accurate(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __no_sub(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___no_sub(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __not_bol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___not_bol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __not_eol(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___not_eol(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __newline_anchor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___newline_anchor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __can_be_null: ::std::os::raw::c_uint,
        __regs_allocated: ::std::os::raw::c_uint,
        __fastmap_accurate: ::std::os::raw::c_uint,
        __no_sub: ::std::os::raw::c_uint,
        __not_bol: ::std::os::raw::c_uint,
        __not_eol: ::std::os::raw::c_uint,
        __newline_anchor: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __can_be_null: u32 = unsafe { ::std::mem::transmute(__can_be_null) };
            __can_be_null as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let __regs_allocated: u32 = unsafe { ::std::mem::transmute(__regs_allocated) };
            __regs_allocated as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __fastmap_accurate: u32 = unsafe { ::std::mem::transmute(__fastmap_accurate) };
            __fastmap_accurate as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __no_sub: u32 = unsafe { ::std::mem::transmute(__no_sub) };
            __no_sub as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __not_bol: u32 = unsafe { ::std::mem::transmute(__not_bol) };
            __not_bol as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __not_eol: u32 = unsafe { ::std::mem::transmute(__not_eol) };
            __not_eol as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __newline_anchor: u32 = unsafe { ::std::mem::transmute(__newline_anchor) };
            __newline_anchor as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type regex_t = re_pattern_buffer;
pub type regoff_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub fn regcomp(
        __preg: *mut regex_t,
        __pattern: *const ::std::os::raw::c_char,
        __cflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regexec(
        __preg: *const regex_t,
        __String: *const ::std::os::raw::c_char,
        __nmatch: usize,
        __pmatch: *mut regmatch_t,
        __eflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regerror(
        __errcode: ::std::os::raw::c_int,
        __preg: *const regex_t,
        __errbuf: *mut ::std::os::raw::c_char,
        __errbuf_size: usize,
    ) -> usize;
}
extern "C" {
    pub fn regfree(__preg: *mut regex_t);
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub const trace_seq_fail_TRACE_SEQ__GOOD: trace_seq_fail = 0;
pub const trace_seq_fail_TRACE_SEQ__BUFFER_POISONED: trace_seq_fail = 1;
pub const trace_seq_fail_TRACE_SEQ__MEM_ALLOC_FAILED: trace_seq_fail = 2;
pub type trace_seq_fail = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trace_seq {
    pub buffer: *mut ::std::os::raw::c_char,
    pub buffer_size: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub readpos: ::std::os::raw::c_uint,
    pub state: trace_seq_fail,
}
impl Default for trace_seq {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn trace_seq_init(s: *mut trace_seq);
}
extern "C" {
    pub fn trace_seq_reset(s: *mut trace_seq);
}
extern "C" {
    pub fn trace_seq_destroy(s: *mut trace_seq);
}
extern "C" {
    pub fn trace_seq_printf(
        s: *mut trace_seq,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_seq_vprintf(
        s: *mut trace_seq,
        fmt: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_seq_puts(
        s: *mut trace_seq,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_seq_putc(s: *mut trace_seq, c: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_seq_terminate(s: *mut trace_seq);
}
extern "C" {
    pub fn trace_seq_do_fprintf(s: *mut trace_seq, fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trace_seq_do_printf(s: *mut trace_seq) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_record {
    pub ts: ::std::os::raw::c_ulonglong,
    pub offset: ::std::os::raw::c_ulonglong,
    pub missed_events: ::std::os::raw::c_longlong,
    pub record_size: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
    pub cpu: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub locked: ::std::os::raw::c_int,
    pub priv_: *mut ::std::os::raw::c_void,
}
impl Default for tep_record {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_handle {
    _unused: [u8; 0],
}
pub type tep_event_handler_func = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut trace_seq,
        record: *mut tep_record,
        event: *mut tep_event,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type tep_plugin_load_func =
    ::std::option::Option<unsafe extern "C" fn(tep: *mut tep_handle) -> ::std::os::raw::c_int>;
pub type tep_plugin_unload_func =
    ::std::option::Option<unsafe extern "C" fn(tep: *mut tep_handle) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_plugin_option {
    pub next: *mut tep_plugin_option,
    pub handle: *mut ::std::os::raw::c_void,
    pub file: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub plugin_alias: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
    pub priv_: *mut ::std::os::raw::c_void,
    pub set: ::std::os::raw::c_int,
}
impl Default for tep_plugin_option {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const tep_format_flags_TEP_FIELD_IS_ARRAY: tep_format_flags = 1;
pub const tep_format_flags_TEP_FIELD_IS_POINTER: tep_format_flags = 2;
pub const tep_format_flags_TEP_FIELD_IS_SIGNED: tep_format_flags = 4;
pub const tep_format_flags_TEP_FIELD_IS_STRING: tep_format_flags = 8;
pub const tep_format_flags_TEP_FIELD_IS_DYNAMIC: tep_format_flags = 16;
pub const tep_format_flags_TEP_FIELD_IS_LONG: tep_format_flags = 32;
pub const tep_format_flags_TEP_FIELD_IS_FLAG: tep_format_flags = 64;
pub const tep_format_flags_TEP_FIELD_IS_SYMBOLIC: tep_format_flags = 128;
pub const tep_format_flags_TEP_FIELD_IS_RELATIVE: tep_format_flags = 256;
pub type tep_format_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_format_field {
    pub next: *mut tep_format_field,
    pub event: *mut tep_event,
    pub type_: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub arraylen: ::std::os::raw::c_uint,
    pub elementsize: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_ulong,
}
impl Default for tep_format_field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_format {
    pub nr_common: ::std::os::raw::c_int,
    pub nr_fields: ::std::os::raw::c_int,
    pub common_fields: *mut tep_format_field,
    pub fields: *mut tep_format_field,
}
impl Default for tep_format {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_atom {
    pub atom: *mut ::std::os::raw::c_char,
}
impl Default for tep_print_arg_atom {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_string {
    pub string: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub field: *mut tep_format_field,
}
impl Default for tep_print_arg_string {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_bitmask {
    pub bitmask: *mut ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_int,
    pub field: *mut tep_format_field,
}
impl Default for tep_print_arg_bitmask {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_field {
    pub name: *mut ::std::os::raw::c_char,
    pub field: *mut tep_format_field,
}
impl Default for tep_print_arg_field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_flag_sym {
    pub next: *mut tep_print_flag_sym,
    pub value: *mut ::std::os::raw::c_char,
    pub str_: *mut ::std::os::raw::c_char,
}
impl Default for tep_print_flag_sym {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_typecast {
    pub type_: *mut ::std::os::raw::c_char,
    pub item: *mut tep_print_arg,
}
impl Default for tep_print_arg_typecast {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_flags {
    pub field: *mut tep_print_arg,
    pub delim: *mut ::std::os::raw::c_char,
    pub flags: *mut tep_print_flag_sym,
}
impl Default for tep_print_arg_flags {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_symbol {
    pub field: *mut tep_print_arg,
    pub symbols: *mut tep_print_flag_sym,
}
impl Default for tep_print_arg_symbol {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_hex {
    pub field: *mut tep_print_arg,
    pub size: *mut tep_print_arg,
}
impl Default for tep_print_arg_hex {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_int_array {
    pub field: *mut tep_print_arg,
    pub count: *mut tep_print_arg,
    pub el_size: *mut tep_print_arg,
}
impl Default for tep_print_arg_int_array {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_dynarray {
    pub field: *mut tep_format_field,
    pub index: *mut tep_print_arg,
}
impl Default for tep_print_arg_dynarray {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_op {
    pub op: *mut ::std::os::raw::c_char,
    pub prio: ::std::os::raw::c_int,
    pub left: *mut tep_print_arg,
    pub right: *mut tep_print_arg,
}
impl Default for tep_print_arg_op {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_function_handler {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_arg_func {
    pub func: *mut tep_function_handler,
    pub args: *mut tep_print_arg,
}
impl Default for tep_print_arg_func {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const tep_print_arg_type_TEP_PRINT_NULL: tep_print_arg_type = 0;
pub const tep_print_arg_type_TEP_PRINT_ATOM: tep_print_arg_type = 1;
pub const tep_print_arg_type_TEP_PRINT_FIELD: tep_print_arg_type = 2;
pub const tep_print_arg_type_TEP_PRINT_FLAGS: tep_print_arg_type = 3;
pub const tep_print_arg_type_TEP_PRINT_SYMBOL: tep_print_arg_type = 4;
pub const tep_print_arg_type_TEP_PRINT_HEX: tep_print_arg_type = 5;
pub const tep_print_arg_type_TEP_PRINT_INT_ARRAY: tep_print_arg_type = 6;
pub const tep_print_arg_type_TEP_PRINT_TYPE: tep_print_arg_type = 7;
pub const tep_print_arg_type_TEP_PRINT_STRING: tep_print_arg_type = 8;
pub const tep_print_arg_type_TEP_PRINT_BSTRING: tep_print_arg_type = 9;
pub const tep_print_arg_type_TEP_PRINT_DYNAMIC_ARRAY: tep_print_arg_type = 10;
pub const tep_print_arg_type_TEP_PRINT_OP: tep_print_arg_type = 11;
pub const tep_print_arg_type_TEP_PRINT_FUNC: tep_print_arg_type = 12;
pub const tep_print_arg_type_TEP_PRINT_BITMASK: tep_print_arg_type = 13;
pub const tep_print_arg_type_TEP_PRINT_DYNAMIC_ARRAY_LEN: tep_print_arg_type = 14;
pub const tep_print_arg_type_TEP_PRINT_HEX_STR: tep_print_arg_type = 15;
pub type tep_print_arg_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tep_print_arg {
    pub next: *mut tep_print_arg,
    pub type_: tep_print_arg_type,
    pub __bindgen_anon_1: tep_print_arg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tep_print_arg__bindgen_ty_1 {
    pub atom: tep_print_arg_atom,
    pub field: tep_print_arg_field,
    pub typecast: tep_print_arg_typecast,
    pub flags: tep_print_arg_flags,
    pub symbol: tep_print_arg_symbol,
    pub hex: tep_print_arg_hex,
    pub int_array: tep_print_arg_int_array,
    pub func: tep_print_arg_func,
    pub string: tep_print_arg_string,
    pub bitmask: tep_print_arg_bitmask,
    pub op: tep_print_arg_op,
    pub dynarray: tep_print_arg_dynarray,
    _bindgen_union_align: [u64; 4usize],
}
impl Default for tep_print_arg__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for tep_print_arg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_parse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_print_fmt {
    pub format: *mut ::std::os::raw::c_char,
    pub args: *mut tep_print_arg,
    pub print_cache: *mut tep_print_parse,
}
impl Default for tep_print_fmt {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_event {
    pub tep: *mut tep_handle,
    pub name: *mut ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub format: tep_format,
    pub print_fmt: tep_print_fmt,
    pub system: *mut ::std::os::raw::c_char,
    pub handler: tep_event_handler_func,
    pub context: *mut ::std::os::raw::c_void,
}
impl Default for tep_event {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const TEP_EVENT_FL_ISFTRACE: ::std::os::raw::c_uint = 1;
pub const TEP_EVENT_FL_ISPRINT: ::std::os::raw::c_uint = 2;
pub const TEP_EVENT_FL_ISBPRINT: ::std::os::raw::c_uint = 4;
pub const TEP_EVENT_FL_ISFUNCENT: ::std::os::raw::c_uint = 16;
pub const TEP_EVENT_FL_ISFUNCRET: ::std::os::raw::c_uint = 32;
pub const TEP_EVENT_FL_NOHANDLE: ::std::os::raw::c_uint = 64;
pub const TEP_EVENT_FL_PRINTRAW: ::std::os::raw::c_uint = 128;
pub const TEP_EVENT_FL_FAILED: ::std::os::raw::c_uint = 2147483648;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const tep_event_sort_type_TEP_EVENT_SORT_ID: tep_event_sort_type = 0;
pub const tep_event_sort_type_TEP_EVENT_SORT_NAME: tep_event_sort_type = 1;
pub const tep_event_sort_type_TEP_EVENT_SORT_SYSTEM: tep_event_sort_type = 2;
pub type tep_event_sort_type = ::std::os::raw::c_uint;
pub const tep_event_type_TEP_EVENT_ERROR: tep_event_type = 0;
pub const tep_event_type_TEP_EVENT_NONE: tep_event_type = 1;
pub const tep_event_type_TEP_EVENT_SPACE: tep_event_type = 2;
pub const tep_event_type_TEP_EVENT_NEWLINE: tep_event_type = 3;
pub const tep_event_type_TEP_EVENT_OP: tep_event_type = 4;
pub const tep_event_type_TEP_EVENT_DELIM: tep_event_type = 5;
pub const tep_event_type_TEP_EVENT_ITEM: tep_event_type = 6;
pub const tep_event_type_TEP_EVENT_DQUOTE: tep_event_type = 7;
pub const tep_event_type_TEP_EVENT_SQUOTE: tep_event_type = 8;
pub type tep_event_type = ::std::os::raw::c_uint;
pub type tep_func_handler = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut trace_seq,
        args: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong,
>;
pub const tep_func_arg_type_TEP_FUNC_ARG_VOID: tep_func_arg_type = 0;
pub const tep_func_arg_type_TEP_FUNC_ARG_INT: tep_func_arg_type = 1;
pub const tep_func_arg_type_TEP_FUNC_ARG_LONG: tep_func_arg_type = 2;
pub const tep_func_arg_type_TEP_FUNC_ARG_STRING: tep_func_arg_type = 3;
pub const tep_func_arg_type_TEP_FUNC_ARG_PTR: tep_func_arg_type = 4;
pub const tep_func_arg_type_TEP_FUNC_ARG_MAX_TYPES: tep_func_arg_type = 5;
pub type tep_func_arg_type = ::std::os::raw::c_uint;
pub const tep_flag_TEP_NSEC_OUTPUT: tep_flag = 1;
pub const tep_flag_TEP_DISABLE_SYS_PLUGINS: tep_flag = 2;
pub const tep_flag_TEP_DISABLE_PLUGINS: tep_flag = 4;
pub type tep_flag = ::std::os::raw::c_uint;
pub const tep_errno_TEP_ERRNO__SUCCESS: tep_errno = 0;
pub const tep_errno_TEP_ERRNO__FILTER_MATCH: tep_errno = 0;
pub const tep_errno___TEP_ERRNO__START: tep_errno = -100000;
pub const tep_errno_TEP_ERRNO__MEM_ALLOC_FAILED: tep_errno = -99999;
pub const tep_errno_TEP_ERRNO__PARSE_EVENT_FAILED: tep_errno = -99998;
pub const tep_errno_TEP_ERRNO__READ_ID_FAILED: tep_errno = -99997;
pub const tep_errno_TEP_ERRNO__READ_FORMAT_FAILED: tep_errno = -99996;
pub const tep_errno_TEP_ERRNO__READ_PRINT_FAILED: tep_errno = -99995;
pub const tep_errno_TEP_ERRNO__OLD_FTRACE_ARG_FAILED: tep_errno = -99994;
pub const tep_errno_TEP_ERRNO__INVALID_ARG_TYPE: tep_errno = -99993;
pub const tep_errno_TEP_ERRNO__INVALID_EXP_TYPE: tep_errno = -99992;
pub const tep_errno_TEP_ERRNO__INVALID_OP_TYPE: tep_errno = -99991;
pub const tep_errno_TEP_ERRNO__INVALID_EVENT_NAME: tep_errno = -99990;
pub const tep_errno_TEP_ERRNO__EVENT_NOT_FOUND: tep_errno = -99989;
pub const tep_errno_TEP_ERRNO__SYNTAX_ERROR: tep_errno = -99988;
pub const tep_errno_TEP_ERRNO__ILLEGAL_RVALUE: tep_errno = -99987;
pub const tep_errno_TEP_ERRNO__ILLEGAL_LVALUE: tep_errno = -99986;
pub const tep_errno_TEP_ERRNO__INVALID_REGEX: tep_errno = -99985;
pub const tep_errno_TEP_ERRNO__ILLEGAL_STRING_CMP: tep_errno = -99984;
pub const tep_errno_TEP_ERRNO__ILLEGAL_INTEGER_CMP: tep_errno = -99983;
pub const tep_errno_TEP_ERRNO__REPARENT_NOT_OP: tep_errno = -99982;
pub const tep_errno_TEP_ERRNO__REPARENT_FAILED: tep_errno = -99981;
pub const tep_errno_TEP_ERRNO__BAD_FILTER_ARG: tep_errno = -99980;
pub const tep_errno_TEP_ERRNO__UNEXPECTED_TYPE: tep_errno = -99979;
pub const tep_errno_TEP_ERRNO__ILLEGAL_TOKEN: tep_errno = -99978;
pub const tep_errno_TEP_ERRNO__INVALID_PAREN: tep_errno = -99977;
pub const tep_errno_TEP_ERRNO__UNBALANCED_PAREN: tep_errno = -99976;
pub const tep_errno_TEP_ERRNO__UNKNOWN_TOKEN: tep_errno = -99975;
pub const tep_errno_TEP_ERRNO__FILTER_NOT_FOUND: tep_errno = -99974;
pub const tep_errno_TEP_ERRNO__NOT_A_NUMBER: tep_errno = -99973;
pub const tep_errno_TEP_ERRNO__NO_FILTER: tep_errno = -99972;
pub const tep_errno_TEP_ERRNO__FILTER_MISS: tep_errno = -99971;
pub const tep_errno___TEP_ERRNO__END: tep_errno = -99970;
pub type tep_errno = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_plugin_list {
    _unused: [u8; 0],
}
pub const tep_plugin_load_priority_TEP_PLUGIN_FIRST: tep_plugin_load_priority = 0;
pub const tep_plugin_load_priority_TEP_PLUGIN_LAST: tep_plugin_load_priority = 1;
pub type tep_plugin_load_priority = ::std::os::raw::c_uint;
extern "C" {
    pub fn tep_add_plugin_path(
        tep: *mut tep_handle,
        path: *mut ::std::os::raw::c_char,
        prio: tep_plugin_load_priority,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_load_plugins(tep: *mut tep_handle) -> *mut tep_plugin_list;
}
extern "C" {
    pub fn tep_unload_plugins(plugin_list: *mut tep_plugin_list, tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_load_plugins_hook(
        tep: *mut tep_handle,
        suffix: *const ::std::os::raw::c_char,
        load_plugin: ::std::option::Option<
            unsafe extern "C" fn(
                tep: *mut tep_handle,
                path: *const ::std::os::raw::c_char,
                name: *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn tep_plugin_list_options() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tep_plugin_free_options_list(list: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tep_plugin_add_options(
        name: *const ::std::os::raw::c_char,
        options: *mut tep_plugin_option,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_plugin_add_option(
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_plugin_remove_options(options: *mut tep_plugin_option);
}
extern "C" {
    pub fn tep_plugin_print_options(s: *mut trace_seq);
}
extern "C" {
    pub fn tep_print_plugins(
        s: *mut trace_seq,
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
        list: *const tep_plugin_list,
    );
}
pub type tep_func_resolver_t = ::std::option::Option<
    unsafe extern "C" fn(
        priv_: *mut ::std::os::raw::c_void,
        addrp: *mut ::std::os::raw::c_ulonglong,
        modp: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char,
>;
extern "C" {
    pub fn tep_set_flag(tep: *mut tep_handle, flag: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tep_clear_flag(tep: *mut tep_handle, flag: tep_flag);
}
extern "C" {
    pub fn tep_test_flag(tep: *mut tep_handle, flags: tep_flag) -> bool;
}
pub const trace_flag_type_TRACE_FLAG_IRQS_OFF: trace_flag_type = 1;
pub const trace_flag_type_TRACE_FLAG_IRQS_NOSUPPORT: trace_flag_type = 2;
pub const trace_flag_type_TRACE_FLAG_NEED_RESCHED: trace_flag_type = 4;
pub const trace_flag_type_TRACE_FLAG_HARDIRQ: trace_flag_type = 8;
pub const trace_flag_type_TRACE_FLAG_SOFTIRQ: trace_flag_type = 16;
pub type trace_flag_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn tep_set_function_resolver(
        tep: *mut tep_handle,
        func: tep_func_resolver_t,
        priv_: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_reset_function_resolver(tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_register_comm(
        tep: *mut tep_handle,
        comm: *const ::std::os::raw::c_char,
        pid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_override_comm(
        tep: *mut tep_handle,
        comm: *const ::std::os::raw::c_char,
        pid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_parse_saved_cmdlines(
        tep: *mut tep_handle,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_parse_kallsyms(
        tep: *mut tep_handle,
        kallsyms: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_register_function(
        tep: *mut tep_handle,
        name: *mut ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
        mod_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_parse_printk_formats(
        tep: *mut tep_handle,
        buf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_register_print_string(
        tep: *mut tep_handle,
        fmt: *const ::std::os::raw::c_char,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_is_pid_registered(tep: *mut tep_handle, pid: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn tep_get_event(tep: *mut tep_handle, index: ::std::os::raw::c_int) -> *mut tep_event;
}
extern "C" {
    pub fn tep_print_event(
        tep: *mut tep_handle,
        s: *mut trace_seq,
        record: *mut tep_record,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn tep_parse_header_page(
        tep: *mut tep_handle,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        long_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_parse_event(
        tep: *mut tep_handle,
        buf: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        sys: *const ::std::os::raw::c_char,
    ) -> tep_errno;
}
extern "C" {
    pub fn tep_parse_format(
        tep: *mut tep_handle,
        eventp: *mut *mut tep_event,
        buf: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
        sys: *const ::std::os::raw::c_char,
    ) -> tep_errno;
}
extern "C" {
    pub fn tep_get_field_raw(
        s: *mut trace_seq,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        len: *mut ::std::os::raw::c_int,
        err: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tep_get_field_val(
        s: *mut trace_seq,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        val: *mut ::std::os::raw::c_ulonglong,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_get_common_field_val(
        s: *mut trace_seq,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        val: *mut ::std::os::raw::c_ulonglong,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_get_any_field_val(
        s: *mut trace_seq,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        val: *mut ::std::os::raw::c_ulonglong,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_print_num_field(
        s: *mut trace_seq,
        fmt: *const ::std::os::raw::c_char,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_print_func_field(
        s: *mut trace_seq,
        fmt: *const ::std::os::raw::c_char,
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
        record: *mut tep_record,
        err: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const tep_reg_handler_TEP_REGISTER_SUCCESS: tep_reg_handler = 0;
pub const tep_reg_handler_TEP_REGISTER_SUCCESS_OVERWRITE: tep_reg_handler = 1;
pub type tep_reg_handler = ::std::os::raw::c_uint;
extern "C" {
    pub fn tep_register_event_handler(
        tep: *mut tep_handle,
        id: ::std::os::raw::c_int,
        sys_name: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        func: tep_event_handler_func,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_unregister_event_handler(
        tep: *mut tep_handle,
        id: ::std::os::raw::c_int,
        sys_name: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        func: tep_event_handler_func,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_register_print_function(
        tep: *mut tep_handle,
        func: tep_func_handler,
        ret_type: tep_func_arg_type,
        name: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_unregister_print_function(
        tep: *mut tep_handle,
        func: tep_func_handler,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_find_common_field(
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
    ) -> *mut tep_format_field;
}
extern "C" {
    pub fn tep_find_field(
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
    ) -> *mut tep_format_field;
}
extern "C" {
    pub fn tep_find_any_field(
        event: *mut tep_event,
        name: *const ::std::os::raw::c_char,
    ) -> *mut tep_format_field;
}
extern "C" {
    pub fn tep_find_function(
        tep: *mut tep_handle,
        addr: ::std::os::raw::c_ulonglong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tep_find_function_address(
        tep: *mut tep_handle,
        addr: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn tep_read_number(
        tep: *mut tep_handle,
        ptr: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn tep_read_number_field(
        field: *mut tep_format_field,
        data: *const ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_get_first_event(tep: *mut tep_handle) -> *mut tep_event;
}
extern "C" {
    pub fn tep_get_events_count(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_find_event(tep: *mut tep_handle, id: ::std::os::raw::c_int) -> *mut tep_event;
}
extern "C" {
    pub fn tep_find_event_by_name(
        tep: *mut tep_handle,
        sys: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut tep_event;
}
extern "C" {
    pub fn tep_find_event_by_record(
        tep: *mut tep_handle,
        record: *mut tep_record,
    ) -> *mut tep_event;
}
extern "C" {
    pub fn tep_data_type(tep: *mut tep_handle, rec: *mut tep_record) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_data_pid(tep: *mut tep_handle, rec: *mut tep_record) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_data_preempt_count(
        tep: *mut tep_handle,
        rec: *mut tep_record,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_data_flags(tep: *mut tep_handle, rec: *mut tep_record) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_data_comm_from_pid(
        tep: *mut tep_handle,
        pid: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_cmdline {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tep_data_pid_from_comm(
        tep: *mut tep_handle,
        comm: *const ::std::os::raw::c_char,
        next: *mut tep_cmdline,
    ) -> *mut tep_cmdline;
}
extern "C" {
    pub fn tep_cmdline_pid(
        tep: *mut tep_handle,
        cmdline: *mut tep_cmdline,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_print_field_content(
        s: *mut trace_seq,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        field: *mut tep_format_field,
    );
}
extern "C" {
    pub fn tep_record_print_fields(
        s: *mut trace_seq,
        record: *mut tep_record,
        event: *mut tep_event,
    );
}
extern "C" {
    pub fn tep_record_print_selected_fields(
        s: *mut trace_seq,
        record: *mut tep_record,
        event: *mut tep_event,
        select_mask: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn tep_print_fields(
        s: *mut trace_seq,
        data: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        event: *mut tep_event,
    );
}
extern "C" {
    pub fn tep_strerror(
        tep: *mut tep_handle,
        errnum: tep_errno,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_list_events(tep: *mut tep_handle, arg1: tep_event_sort_type) -> *mut *mut tep_event;
}
extern "C" {
    pub fn tep_list_events_copy(
        tep: *mut tep_handle,
        arg1: tep_event_sort_type,
    ) -> *mut *mut tep_event;
}
extern "C" {
    pub fn tep_event_common_fields(event: *mut tep_event) -> *mut *mut tep_format_field;
}
extern "C" {
    pub fn tep_event_fields(event: *mut tep_event) -> *mut *mut tep_format_field;
}
extern "C" {
    pub fn tep_get_function_count(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
pub const tep_endian_TEP_LITTLE_ENDIAN: tep_endian = 0;
pub const tep_endian_TEP_BIG_ENDIAN: tep_endian = 1;
pub type tep_endian = ::std::os::raw::c_uint;
extern "C" {
    pub fn tep_get_cpus(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_set_cpus(tep: *mut tep_handle, cpus: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tep_get_long_size(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_set_long_size(tep: *mut tep_handle, long_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tep_get_page_size(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_get_sub_buffer_size(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_set_page_size(tep: *mut tep_handle, _page_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tep_is_file_bigendian(tep: *mut tep_handle) -> bool;
}
extern "C" {
    pub fn tep_set_file_bigendian(tep: *mut tep_handle, endian: tep_endian);
}
extern "C" {
    pub fn tep_is_local_bigendian(tep: *mut tep_handle) -> bool;
}
extern "C" {
    pub fn tep_set_local_bigendian(tep: *mut tep_handle, endian: tep_endian);
}
extern "C" {
    pub fn tep_get_header_page_size(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_get_header_timestamp_size(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_is_old_format(tep: *mut tep_handle) -> bool;
}
extern "C" {
    pub fn tep_set_test_filters(tep: *mut tep_handle, test_filters: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tep_alloc() -> *mut tep_handle;
}
extern "C" {
    pub fn tep_free(tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_ref(tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_unref(tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_get_ref(tep: *mut tep_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_print_funcs(tep: *mut tep_handle);
}
extern "C" {
    pub fn tep_print_printk(tep: *mut tep_handle);
}
pub const tep_filter_boolean_type_TEP_FILTER_FALSE: tep_filter_boolean_type = 0;
pub const tep_filter_boolean_type_TEP_FILTER_TRUE: tep_filter_boolean_type = 1;
pub type tep_filter_boolean_type = ::std::os::raw::c_uint;
pub const tep_filter_op_type_TEP_FILTER_OP_AND: tep_filter_op_type = 1;
pub const tep_filter_op_type_TEP_FILTER_OP_OR: tep_filter_op_type = 2;
pub const tep_filter_op_type_TEP_FILTER_OP_NOT: tep_filter_op_type = 3;
pub type tep_filter_op_type = ::std::os::raw::c_uint;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_NONE: tep_filter_cmp_type = 0;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_EQ: tep_filter_cmp_type = 1;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_NE: tep_filter_cmp_type = 2;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_GT: tep_filter_cmp_type = 3;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_LT: tep_filter_cmp_type = 4;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_GE: tep_filter_cmp_type = 5;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_LE: tep_filter_cmp_type = 6;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_MATCH: tep_filter_cmp_type = 7;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_NOT_MATCH: tep_filter_cmp_type = 8;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_REGEX: tep_filter_cmp_type = 9;
pub const tep_filter_cmp_type_TEP_FILTER_CMP_NOT_REGEX: tep_filter_cmp_type = 10;
pub type tep_filter_cmp_type = ::std::os::raw::c_uint;
pub const tep_filter_exp_type_TEP_FILTER_EXP_NONE: tep_filter_exp_type = 0;
pub const tep_filter_exp_type_TEP_FILTER_EXP_ADD: tep_filter_exp_type = 1;
pub const tep_filter_exp_type_TEP_FILTER_EXP_SUB: tep_filter_exp_type = 2;
pub const tep_filter_exp_type_TEP_FILTER_EXP_MUL: tep_filter_exp_type = 3;
pub const tep_filter_exp_type_TEP_FILTER_EXP_DIV: tep_filter_exp_type = 4;
pub const tep_filter_exp_type_TEP_FILTER_EXP_MOD: tep_filter_exp_type = 5;
pub const tep_filter_exp_type_TEP_FILTER_EXP_RSHIFT: tep_filter_exp_type = 6;
pub const tep_filter_exp_type_TEP_FILTER_EXP_LSHIFT: tep_filter_exp_type = 7;
pub const tep_filter_exp_type_TEP_FILTER_EXP_AND: tep_filter_exp_type = 8;
pub const tep_filter_exp_type_TEP_FILTER_EXP_OR: tep_filter_exp_type = 9;
pub const tep_filter_exp_type_TEP_FILTER_EXP_XOR: tep_filter_exp_type = 10;
pub const tep_filter_exp_type_TEP_FILTER_EXP_NOT: tep_filter_exp_type = 11;
pub type tep_filter_exp_type = ::std::os::raw::c_uint;
pub const tep_filter_arg_type_TEP_FILTER_ARG_NONE: tep_filter_arg_type = 0;
pub const tep_filter_arg_type_TEP_FILTER_ARG_BOOLEAN: tep_filter_arg_type = 1;
pub const tep_filter_arg_type_TEP_FILTER_ARG_VALUE: tep_filter_arg_type = 2;
pub const tep_filter_arg_type_TEP_FILTER_ARG_FIELD: tep_filter_arg_type = 3;
pub const tep_filter_arg_type_TEP_FILTER_ARG_EXP: tep_filter_arg_type = 4;
pub const tep_filter_arg_type_TEP_FILTER_ARG_OP: tep_filter_arg_type = 5;
pub const tep_filter_arg_type_TEP_FILTER_ARG_NUM: tep_filter_arg_type = 6;
pub const tep_filter_arg_type_TEP_FILTER_ARG_STR: tep_filter_arg_type = 7;
pub type tep_filter_arg_type = ::std::os::raw::c_uint;
pub const tep_filter_value_type_TEP_FILTER_NUMBER: tep_filter_value_type = 0;
pub const tep_filter_value_type_TEP_FILTER_STRING: tep_filter_value_type = 1;
pub const tep_filter_value_type_TEP_FILTER_CHAR: tep_filter_value_type = 2;
pub type tep_filter_value_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_boolean {
    pub value: tep_filter_boolean_type,
}
impl Default for tep_filter_arg_boolean {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_field {
    pub field: *mut tep_format_field,
}
impl Default for tep_filter_arg_field {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tep_filter_arg_value {
    pub type_: tep_filter_value_type,
    pub __bindgen_anon_1: tep_filter_arg_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tep_filter_arg_value__bindgen_ty_1 {
    pub str_: *mut ::std::os::raw::c_char,
    pub val: ::std::os::raw::c_ulonglong,
    _bindgen_union_align: u64,
}
impl Default for tep_filter_arg_value__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for tep_filter_arg_value {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_op {
    pub type_: tep_filter_op_type,
    pub left: *mut tep_filter_arg,
    pub right: *mut tep_filter_arg,
}
impl Default for tep_filter_arg_op {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_exp {
    pub type_: tep_filter_exp_type,
    pub left: *mut tep_filter_arg,
    pub right: *mut tep_filter_arg,
}
impl Default for tep_filter_arg_exp {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_num {
    pub type_: tep_filter_cmp_type,
    pub left: *mut tep_filter_arg,
    pub right: *mut tep_filter_arg,
}
impl Default for tep_filter_arg_num {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_arg_str {
    pub type_: tep_filter_cmp_type,
    pub field: *mut tep_format_field,
    pub val: *mut ::std::os::raw::c_char,
    pub buffer: *mut ::std::os::raw::c_char,
    pub reg: regex_t,
}
impl Default for tep_filter_arg_str {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tep_filter_arg {
    pub type_: tep_filter_arg_type,
    pub __bindgen_anon_1: tep_filter_arg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tep_filter_arg__bindgen_ty_1 {
    pub boolean: tep_filter_arg_boolean,
    pub field: tep_filter_arg_field,
    pub value: tep_filter_arg_value,
    pub op: tep_filter_arg_op,
    pub exp: tep_filter_arg_exp,
    pub num: tep_filter_arg_num,
    pub str_: tep_filter_arg_str,
    _bindgen_union_align: [u64; 12usize],
}
impl Default for tep_filter_arg__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl Default for tep_filter_arg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tep_filter_type {
    pub event_id: ::std::os::raw::c_int,
    pub event: *mut tep_event,
    pub filter: *mut tep_filter_arg,
}
impl Default for tep_filter_type {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tep_event_filter {
    pub tep: *mut tep_handle,
    pub filters: ::std::os::raw::c_int,
    pub event_filters: *mut tep_filter_type,
    pub error_buffer: [::std::os::raw::c_char; 1024usize],
}
impl Default for tep_event_filter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn tep_filter_alloc(tep: *mut tep_handle) -> *mut tep_event_filter;
}
extern "C" {
    pub fn tep_filter_add_filter_str(
        filter: *mut tep_event_filter,
        filter_str: *const ::std::os::raw::c_char,
    ) -> tep_errno;
}
extern "C" {
    pub fn tep_filter_match(filter: *mut tep_event_filter, record: *mut tep_record) -> tep_errno;
}
extern "C" {
    pub fn tep_filter_strerror(
        filter: *mut tep_event_filter,
        err: tep_errno,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_event_filtered(
        filter: *mut tep_event_filter,
        event_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_filter_reset(filter: *mut tep_event_filter);
}
extern "C" {
    pub fn tep_filter_free(filter: *mut tep_event_filter);
}
extern "C" {
    pub fn tep_filter_make_string(
        filter: *mut tep_event_filter,
        event_id: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tep_filter_remove_event(
        filter: *mut tep_event_filter,
        event_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_filter_copy(
        dest: *mut tep_event_filter,
        source: *mut tep_event_filter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tep_filter_compare(
        filter1: *mut tep_event_filter,
        filter2: *mut tep_event_filter,
    ) -> ::std::os::raw::c_int;
}
pub const tep_loglevel_TEP_LOG_NONE: tep_loglevel = 0;
pub const tep_loglevel_TEP_LOG_CRITICAL: tep_loglevel = 1;
pub const tep_loglevel_TEP_LOG_ERROR: tep_loglevel = 2;
pub const tep_loglevel_TEP_LOG_WARNING: tep_loglevel = 3;
pub const tep_loglevel_TEP_LOG_INFO: tep_loglevel = 4;
pub const tep_loglevel_TEP_LOG_DEBUG: tep_loglevel = 5;
pub const tep_loglevel_TEP_LOG_ALL: tep_loglevel = 6;
pub type tep_loglevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn tep_set_loglevel(level: tep_loglevel);
}
extern "C" {
    pub fn tep_print_field(
        s: *mut trace_seq,
        data: *mut ::std::os::raw::c_void,
        field: *mut tep_format_field,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_get_tracing_file(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_put_tracing_file(name: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tracefs_tracing_dir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_debug_dir() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_instance {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracefs_instance_free(instance: *mut tracefs_instance);
}
extern "C" {
    pub fn tracefs_instance_create(name: *const ::std::os::raw::c_char) -> *mut tracefs_instance;
}
extern "C" {
    pub fn tracefs_instance_alloc(
        tracing_dir: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_instance;
}
extern "C" {
    pub fn tracefs_instance_destroy(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_is_new(instance: *mut tracefs_instance) -> bool;
}
extern "C" {
    pub fn tracefs_instance_get_name(
        instance: *mut tracefs_instance,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_get_trace_dir(
        instance: *mut tracefs_instance,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_get_file(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_get_dir(instance: *mut tracefs_instance)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_file_write(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_file_append(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_file_clear(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_file_read(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        psize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_file_read_number(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        res: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_file_open(
        instance: *mut tracefs_instance,
        file: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instances_walk(
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_set_affinity_set(
        instance: *mut tracefs_instance,
        set: *mut cpu_set_t,
        set_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_set_affinity_raw(
        instance: *mut tracefs_instance,
        mask: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_set_affinity(
        instance: *mut tracefs_instance,
        cpu_str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instance_get_affinity(
        instance: *mut tracefs_instance,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_get_affinity_raw(
        instance: *mut tracefs_instance,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_get_affinity_set(
        instance: *mut tracefs_instance,
        set: *mut cpu_set_t,
        set_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_instances(
        regex: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_instance_exists(name: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn tracefs_file_exists(
        instance: *mut tracefs_instance,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_dir_exists(
        instance: *mut tracefs_instance,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_trace_is_on(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_trace_on(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_trace_off(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_trace_on_fd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_trace_off_fd(fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_enable(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_disable(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_error_last(instance: *mut tracefs_instance) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_error_all(instance: *mut tracefs_instance) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_error_clear(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_list_free(list: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tracefs_list_add(
        list: *mut *mut ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_list_size(list: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_print_init(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_printf(
        instance: *mut tracefs_instance,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_vprintf(
        instance: *mut tracefs_instance,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_print_close(instance: *mut tracefs_instance);
}
extern "C" {
    pub fn tracefs_binary_init(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_binary_write(
        instance: *mut tracefs_instance,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_binary_close(instance: *mut tracefs_instance);
}
extern "C" {
    pub fn tracefs_event_systems(
        tracing_dir: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_system_events(
        tracing_dir: *const ::std::os::raw::c_char,
        system: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_iterate_raw_events(
        tep: *mut tep_handle,
        instance: *mut tracefs_instance,
        cpus: *mut cpu_set_t,
        cpu_size: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut tep_event,
                arg2: *mut tep_record,
                arg3: ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        callback_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_iterate_stop(instance: *mut tracefs_instance);
}
extern "C" {
    pub fn tracefs_event_get_file(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_event_file_read(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        psize: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_event_file_write(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_file_append(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_file_clear(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_file_exists(
        instance: *mut tracefs_instance,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_tracers(
        tracing_dir: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_local_events(tracing_dir: *const ::std::os::raw::c_char) -> *mut tep_handle;
}
extern "C" {
    pub fn tracefs_local_events_system(
        tracing_dir: *const ::std::os::raw::c_char,
        sys_names: *const *const ::std::os::raw::c_char,
    ) -> *mut tep_handle;
}
extern "C" {
    pub fn tracefs_fill_local_events(
        tracing_dir: *const ::std::os::raw::c_char,
        tep: *mut tep_handle,
        parsing_failures: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_load_cmdlines(
        tracing_dir: *const ::std::os::raw::c_char,
        tep: *mut tep_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_get_clock(instance: *mut tracefs_instance) -> *mut ::std::os::raw::c_char;
}
pub const tracefs_option_id_TRACEFS_OPTION_INVALID: tracefs_option_id = 0;
pub const tracefs_option_id_TRACEFS_OPTION_ANNOTATE: tracefs_option_id = 1;
pub const tracefs_option_id_TRACEFS_OPTION_BIN: tracefs_option_id = 2;
pub const tracefs_option_id_TRACEFS_OPTION_BLK_CGNAME: tracefs_option_id = 3;
pub const tracefs_option_id_TRACEFS_OPTION_BLK_CGROUP: tracefs_option_id = 4;
pub const tracefs_option_id_TRACEFS_OPTION_BLK_CLASSIC: tracefs_option_id = 5;
pub const tracefs_option_id_TRACEFS_OPTION_BLOCK: tracefs_option_id = 6;
pub const tracefs_option_id_TRACEFS_OPTION_CONTEXT_INFO: tracefs_option_id = 7;
pub const tracefs_option_id_TRACEFS_OPTION_DISABLE_ON_FREE: tracefs_option_id = 8;
pub const tracefs_option_id_TRACEFS_OPTION_DISPLAY_GRAPH: tracefs_option_id = 9;
pub const tracefs_option_id_TRACEFS_OPTION_EVENT_FORK: tracefs_option_id = 10;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_ABSTIME: tracefs_option_id = 11;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_CPU: tracefs_option_id = 12;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_DURATION: tracefs_option_id = 13;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_IRQS: tracefs_option_id = 14;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_OVERHEAD: tracefs_option_id = 15;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_OVERRUN: tracefs_option_id = 16;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_PROC: tracefs_option_id = 17;
pub const tracefs_option_id_TRACEFS_OPTION_FGRAPH_TAIL: tracefs_option_id = 18;
pub const tracefs_option_id_TRACEFS_OPTION_FUNC_STACKTRACE: tracefs_option_id = 19;
pub const tracefs_option_id_TRACEFS_OPTION_FUNCTION_FORK: tracefs_option_id = 20;
pub const tracefs_option_id_TRACEFS_OPTION_FUNCTION_TRACE: tracefs_option_id = 21;
pub const tracefs_option_id_TRACEFS_OPTION_GRAPH_TIME: tracefs_option_id = 22;
pub const tracefs_option_id_TRACEFS_OPTION_HEX: tracefs_option_id = 23;
pub const tracefs_option_id_TRACEFS_OPTION_IRQ_INFO: tracefs_option_id = 24;
pub const tracefs_option_id_TRACEFS_OPTION_LATENCY_FORMAT: tracefs_option_id = 25;
pub const tracefs_option_id_TRACEFS_OPTION_MARKERS: tracefs_option_id = 26;
pub const tracefs_option_id_TRACEFS_OPTION_OVERWRITE: tracefs_option_id = 27;
pub const tracefs_option_id_TRACEFS_OPTION_PAUSE_ON_TRACE: tracefs_option_id = 28;
pub const tracefs_option_id_TRACEFS_OPTION_PRINTK_MSG_ONLY: tracefs_option_id = 29;
pub const tracefs_option_id_TRACEFS_OPTION_PRINT_PARENT: tracefs_option_id = 30;
pub const tracefs_option_id_TRACEFS_OPTION_RAW: tracefs_option_id = 31;
pub const tracefs_option_id_TRACEFS_OPTION_RECORD_CMD: tracefs_option_id = 32;
pub const tracefs_option_id_TRACEFS_OPTION_RECORD_TGID: tracefs_option_id = 33;
pub const tracefs_option_id_TRACEFS_OPTION_SLEEP_TIME: tracefs_option_id = 34;
pub const tracefs_option_id_TRACEFS_OPTION_STACKTRACE: tracefs_option_id = 35;
pub const tracefs_option_id_TRACEFS_OPTION_SYM_ADDR: tracefs_option_id = 36;
pub const tracefs_option_id_TRACEFS_OPTION_SYM_OFFSET: tracefs_option_id = 37;
pub const tracefs_option_id_TRACEFS_OPTION_SYM_USEROBJ: tracefs_option_id = 38;
pub const tracefs_option_id_TRACEFS_OPTION_TRACE_PRINTK: tracefs_option_id = 39;
pub const tracefs_option_id_TRACEFS_OPTION_USERSTACKTRACE: tracefs_option_id = 40;
pub const tracefs_option_id_TRACEFS_OPTION_VERBOSE: tracefs_option_id = 41;
pub type tracefs_option_id = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_options_mask {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracefs_option_mask_is_set(
        options: *const tracefs_options_mask,
        id: tracefs_option_id,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_options_get_supported(
        instance: *mut tracefs_instance,
    ) -> *const tracefs_options_mask;
}
extern "C" {
    pub fn tracefs_option_is_supported(
        instance: *mut tracefs_instance,
        id: tracefs_option_id,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_options_get_enabled(
        instance: *mut tracefs_instance,
    ) -> *const tracefs_options_mask;
}
extern "C" {
    pub fn tracefs_option_is_enabled(
        instance: *mut tracefs_instance,
        id: tracefs_option_id,
    ) -> bool;
}
extern "C" {
    pub fn tracefs_option_enable(
        instance: *mut tracefs_instance,
        id: tracefs_option_id,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_option_disable(
        instance: *mut tracefs_instance,
        id: tracefs_option_id,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_option_name(id: tracefs_option_id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_option_id(name: *const ::std::os::raw::c_char) -> tracefs_option_id;
}
pub const TRACEFS_FL_RESET: ::std::os::raw::c_uint = 1;
pub const TRACEFS_FL_CONTINUE: ::std::os::raw::c_uint = 2;
pub const TRACEFS_FL_FUTURE: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_function_filter(
        instance: *mut tracefs_instance,
        filter: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_function_notrace(
        instance: *mut tracefs_instance,
        filter: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_filter_functions(
        filter: *const ::std::os::raw::c_char,
        module: *const ::std::os::raw::c_char,
        list: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_set_loglevel(level: tep_loglevel);
}
pub const tracefs_tracers_TRACEFS_TRACER_NOP: tracefs_tracers = 0;
pub const tracefs_tracers_TRACEFS_TRACER_CUSTOM: tracefs_tracers = 1;
pub const tracefs_tracers_TRACEFS_TRACER_FUNCTION: tracefs_tracers = 2;
pub const tracefs_tracers_TRACEFS_TRACER_FUNCTION_GRAPH: tracefs_tracers = 3;
pub const tracefs_tracers_TRACEFS_TRACER_IRQSOFF: tracefs_tracers = 4;
pub const tracefs_tracers_TRACEFS_TRACER_PREEMPTOFF: tracefs_tracers = 5;
pub const tracefs_tracers_TRACEFS_TRACER_PREEMPTIRQSOFF: tracefs_tracers = 6;
pub const tracefs_tracers_TRACEFS_TRACER_WAKEUP: tracefs_tracers = 7;
pub const tracefs_tracers_TRACEFS_TRACER_WAKEUP_RT: tracefs_tracers = 8;
pub const tracefs_tracers_TRACEFS_TRACER_WAKEUP_DL: tracefs_tracers = 9;
pub const tracefs_tracers_TRACEFS_TRACER_MMIOTRACE: tracefs_tracers = 10;
pub const tracefs_tracers_TRACEFS_TRACER_HWLAT: tracefs_tracers = 11;
pub const tracefs_tracers_TRACEFS_TRACER_BRANCH: tracefs_tracers = 12;
pub const tracefs_tracers_TRACEFS_TRACER_BLOCK: tracefs_tracers = 13;
pub type tracefs_tracers = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_tracer_set(
        instance: *mut tracefs_instance,
        tracer: tracefs_tracers,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_tracer_clear(instance: *mut tracefs_instance) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_trace_pipe_stream(
        fd: ::std::os::raw::c_int,
        instance: *mut tracefs_instance,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn tracefs_trace_pipe_print(
        instance: *mut tracefs_instance,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn tracefs_trace_pipe_stop(instance: *mut tracefs_instance);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_dynevent {
    _unused: [u8; 0],
}
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_UNKNOWN: tracefs_dynevent_type = 0;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_KPROBE: tracefs_dynevent_type = 1;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_KRETPROBE: tracefs_dynevent_type = 2;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_UPROBE: tracefs_dynevent_type = 4;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_URETPROBE: tracefs_dynevent_type = 8;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_EPROBE: tracefs_dynevent_type = 16;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_SYNTH: tracefs_dynevent_type = 32;
pub const tracefs_dynevent_type_TRACEFS_DYNEVENT_MAX: tracefs_dynevent_type = 64;
pub type tracefs_dynevent_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_dynevent_create(devent: *mut tracefs_dynevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_dynevent_destroy(
        devent: *mut tracefs_dynevent,
        force: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_dynevent_destroy_all(
        types: ::std::os::raw::c_uint,
        force: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_dynevent_free(devent: *mut tracefs_dynevent);
}
extern "C" {
    pub fn tracefs_dynevent_list_free(events: *mut *mut tracefs_dynevent);
}
extern "C" {
    pub fn tracefs_dynevent_get_all(
        types: ::std::os::raw::c_uint,
        system: *const ::std::os::raw::c_char,
    ) -> *mut *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_dynevent_get(
        type_: tracefs_dynevent_type,
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_dynevent_info(
        dynevent: *mut tracefs_dynevent,
        system: *mut *mut ::std::os::raw::c_char,
        event: *mut *mut ::std::os::raw::c_char,
        prefix: *mut *mut ::std::os::raw::c_char,
        addr: *mut *mut ::std::os::raw::c_char,
        format: *mut *mut ::std::os::raw::c_char,
    ) -> tracefs_dynevent_type;
}
extern "C" {
    pub fn tracefs_dynevent_get_event(
        tep: *mut tep_handle,
        dynevent: *mut tracefs_dynevent,
    ) -> *mut tep_event;
}
extern "C" {
    pub fn tracefs_eprobe_alloc(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        target_system: *const ::std::os::raw::c_char,
        target_event: *const ::std::os::raw::c_char,
        fetchargs: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_uprobe_alloc(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_ulonglong,
        fetchargs: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_uretprobe_alloc(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        offset: ::std::os::raw::c_ulonglong,
        fetchargs: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_kprobe_alloc(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_kretprobe_alloc(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        max: ::std::os::raw::c_uint,
    ) -> *mut tracefs_dynevent;
}
extern "C" {
    pub fn tracefs_kprobe_raw(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_kretprobe_raw(
        system: *const ::std::os::raw::c_char,
        event: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_NORMAL: tracefs_hist_key_type = 0;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_HEX: tracefs_hist_key_type = 1;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_SYM: tracefs_hist_key_type = 2;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_SYM_OFFSET: tracefs_hist_key_type = 3;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_SYSCALL: tracefs_hist_key_type = 4;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_EXECNAME: tracefs_hist_key_type = 5;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_LOG: tracefs_hist_key_type = 6;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_USECS: tracefs_hist_key_type = 7;
pub const tracefs_hist_key_type_TRACEFS_HIST_KEY_MAX: tracefs_hist_key_type = 8;
pub type tracefs_hist_key_type = ::std::os::raw::c_uint;
pub const tracefs_hist_sort_direction_TRACEFS_HIST_SORT_ASCENDING: tracefs_hist_sort_direction = 0;
pub const tracefs_hist_sort_direction_TRACEFS_HIST_SORT_DESCENDING: tracefs_hist_sort_direction = 1;
pub type tracefs_hist_sort_direction = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_hist {
    _unused: [u8; 0],
}
pub const tracefs_hist_command_TRACEFS_HIST_CMD_START: tracefs_hist_command = 0;
pub const tracefs_hist_command_TRACEFS_HIST_CMD_PAUSE: tracefs_hist_command = 1;
pub const tracefs_hist_command_TRACEFS_HIST_CMD_CONT: tracefs_hist_command = 2;
pub const tracefs_hist_command_TRACEFS_HIST_CMD_CLEAR: tracefs_hist_command = 3;
pub const tracefs_hist_command_TRACEFS_HIST_CMD_DESTROY: tracefs_hist_command = 4;
pub type tracefs_hist_command = ::std::os::raw::c_uint;
pub const tracefs_filter_TRACEFS_FILTER_COMPARE: tracefs_filter = 0;
pub const tracefs_filter_TRACEFS_FILTER_AND: tracefs_filter = 1;
pub const tracefs_filter_TRACEFS_FILTER_OR: tracefs_filter = 2;
pub const tracefs_filter_TRACEFS_FILTER_NOT: tracefs_filter = 3;
pub const tracefs_filter_TRACEFS_FILTER_OPEN_PAREN: tracefs_filter = 4;
pub const tracefs_filter_TRACEFS_FILTER_CLOSE_PAREN: tracefs_filter = 5;
pub type tracefs_filter = ::std::os::raw::c_uint;
pub const tracefs_compare_TRACEFS_COMPARE_EQ: tracefs_compare = 0;
pub const tracefs_compare_TRACEFS_COMPARE_NE: tracefs_compare = 1;
pub const tracefs_compare_TRACEFS_COMPARE_GT: tracefs_compare = 2;
pub const tracefs_compare_TRACEFS_COMPARE_GE: tracefs_compare = 3;
pub const tracefs_compare_TRACEFS_COMPARE_LT: tracefs_compare = 4;
pub const tracefs_compare_TRACEFS_COMPARE_LE: tracefs_compare = 5;
pub const tracefs_compare_TRACEFS_COMPARE_RE: tracefs_compare = 6;
pub const tracefs_compare_TRACEFS_COMPARE_AND: tracefs_compare = 7;
pub type tracefs_compare = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_hist_free(hist: *mut tracefs_hist);
}
extern "C" {
    pub fn tracefs_hist_alloc(
        tep: *mut tep_handle,
        system: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        type_: tracefs_hist_key_type,
    ) -> *mut tracefs_hist;
}
extern "C" {
    pub fn tracefs_hist_alloc_2d(
        tep: *mut tep_handle,
        system: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        key1: *const ::std::os::raw::c_char,
        type1: tracefs_hist_key_type,
        key2: *const ::std::os::raw::c_char,
        type2: tracefs_hist_key_type,
    ) -> *mut tracefs_hist;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_hist_axis {
    pub key: *const ::std::os::raw::c_char,
    pub type_: tracefs_hist_key_type,
}
impl Default for tracefs_hist_axis {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn tracefs_hist_alloc_nd(
        tep: *mut tep_handle,
        system: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        axes: *mut tracefs_hist_axis,
    ) -> *mut tracefs_hist;
}
extern "C" {
    pub fn tracefs_hist_get_name(hist: *mut tracefs_hist) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_hist_get_event(hist: *mut tracefs_hist) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_hist_get_system(hist: *mut tracefs_hist) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_hist_add_key(
        hist: *mut tracefs_hist,
        key: *const ::std::os::raw::c_char,
        type_: tracefs_hist_key_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_add_value(
        hist: *mut tracefs_hist,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_add_sort_key(
        hist: *mut tracefs_hist,
        sort_key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_set_sort_key(
        hist: *mut tracefs_hist,
        sort_key: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_sort_key_direction(
        hist: *mut tracefs_hist,
        sort_key: *const ::std::os::raw::c_char,
        dir: tracefs_hist_sort_direction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_add_name(
        hist: *mut tracefs_hist,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_append_filter(
        hist: *mut tracefs_hist,
        type_: tracefs_filter,
        field: *const ::std::os::raw::c_char,
        compare: tracefs_compare,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_echo_cmd(
        seq: *mut trace_seq,
        instance: *mut tracefs_instance,
        hist: *mut tracefs_hist,
        command: tracefs_hist_command,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_hist_command(
        instance: *mut tracefs_instance,
        hist: *mut tracefs_hist,
        cmd: tracefs_hist_command,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracefs_synth {
    _unused: [u8; 0],
}
pub const tracefs_synth_calc_TRACEFS_SYNTH_DELTA_END: tracefs_synth_calc = 0;
pub const tracefs_synth_calc_TRACEFS_SYNTH_DELTA_START: tracefs_synth_calc = 1;
pub const tracefs_synth_calc_TRACEFS_SYNTH_ADD: tracefs_synth_calc = 2;
pub type tracefs_synth_calc = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_filter_string_append(
        event: *mut tep_event,
        filter: *mut *mut ::std::os::raw::c_char,
        type_: tracefs_filter,
        field: *const ::std::os::raw::c_char,
        compare: tracefs_compare,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_filter_string_verify(
        event: *mut tep_event,
        filter: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_filter_apply(
        instance: *mut tracefs_instance,
        event: *mut tep_event,
        filter: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_filter_clear(
        instance: *mut tracefs_instance,
        event: *mut tep_event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_append_filter(
        event: *mut tep_event,
        filter: *mut *mut ::std::os::raw::c_char,
        type_: tracefs_filter,
        field: *const ::std::os::raw::c_char,
        compare: tracefs_compare,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_event_verify_filter(
        event: *mut tep_event,
        filter: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const tracefs_synth_handler_TRACEFS_SYNTH_HANDLE_NONE: tracefs_synth_handler = 0;
pub const tracefs_synth_handler_TRACEFS_SYNTH_HANDLE_MATCH: tracefs_synth_handler = 1;
pub const tracefs_synth_handler_TRACEFS_SYNTH_HANDLE_MAX: tracefs_synth_handler = 2;
pub const tracefs_synth_handler_TRACEFS_SYNTH_HANDLE_CHANGE: tracefs_synth_handler = 3;
pub type tracefs_synth_handler = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracefs_synth_get_name(synth: *mut tracefs_synth) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_synth_alloc(
        tep: *mut tep_handle,
        name: *const ::std::os::raw::c_char,
        start_system: *const ::std::os::raw::c_char,
        start_event: *const ::std::os::raw::c_char,
        end_system: *const ::std::os::raw::c_char,
        end_event: *const ::std::os::raw::c_char,
        start_match_field: *const ::std::os::raw::c_char,
        end_match_field: *const ::std::os::raw::c_char,
        match_name: *const ::std::os::raw::c_char,
    ) -> *mut tracefs_synth;
}
extern "C" {
    pub fn tracefs_synth_add_match_field(
        synth: *mut tracefs_synth,
        start_match_field: *const ::std::os::raw::c_char,
        end_match_field: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_add_compare_field(
        synth: *mut tracefs_synth,
        start_compare_field: *const ::std::os::raw::c_char,
        end_compare_field: *const ::std::os::raw::c_char,
        calc: tracefs_synth_calc,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_add_start_field(
        synth: *mut tracefs_synth,
        start_field: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_add_end_field(
        synth: *mut tracefs_synth,
        end_field: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_append_start_filter(
        synth: *mut tracefs_synth,
        type_: tracefs_filter,
        field: *const ::std::os::raw::c_char,
        compare: tracefs_compare,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_append_end_filter(
        synth: *mut tracefs_synth,
        type_: tracefs_filter,
        field: *const ::std::os::raw::c_char,
        compare: tracefs_compare,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_trace(
        synth: *mut tracefs_synth,
        type_: tracefs_synth_handler,
        field: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_snapshot(
        synth: *mut tracefs_synth,
        type_: tracefs_synth_handler,
        field: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_save(
        synth: *mut tracefs_synth,
        type_: tracefs_synth_handler,
        field: *const ::std::os::raw::c_char,
        save_fields: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_complete(synth: *mut tracefs_synth) -> bool;
}
extern "C" {
    pub fn tracefs_synth_get_start_hist(synth: *mut tracefs_synth) -> *mut tracefs_hist;
}
extern "C" {
    pub fn tracefs_synth_create(synth: *mut tracefs_synth) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_destroy(synth: *mut tracefs_synth) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_free(synth: *mut tracefs_synth);
}
extern "C" {
    pub fn tracefs_synth_echo_cmd(
        seq: *mut trace_seq,
        synth: *mut tracefs_synth,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_raw_fmt(
        seq: *mut trace_seq,
        synth: *mut tracefs_synth,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracefs_synth_show_event(synth: *mut tracefs_synth) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_synth_show_start_hist(
        synth: *mut tracefs_synth,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_synth_show_end_hist(synth: *mut tracefs_synth) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracefs_sql(
        tep: *mut tep_handle,
        name: *const ::std::os::raw::c_char,
        sql_buffer: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> *mut tracefs_synth;
}
extern "C" {
    pub fn tracefs_synth_get_event(
        tep: *mut tep_handle,
        synth: *mut tracefs_synth,
    ) -> *mut tep_event;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracecmd_input {
    _unused: [u8; 0],
}
pub const tracecmd_open_flags_TRACECMD_FL_LOAD_NO_PLUGINS: tracecmd_open_flags = 1;
pub const tracecmd_open_flags_TRACECMD_FL_LOAD_NO_SYSTEM_PLUGINS: tracecmd_open_flags = 2;
pub type tracecmd_open_flags = ::std::os::raw::c_uint;
pub const tracecmd_section_flags_TRACECMD_SEC_FL_COMPRESS: tracecmd_section_flags = 1;
pub type tracecmd_section_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracecmd_open_head(
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut tracecmd_input;
}
extern "C" {
    pub fn tracecmd_open(
        file: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut tracecmd_input;
}
extern "C" {
    pub fn tracecmd_open_fd(
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut tracecmd_input;
}
extern "C" {
    pub fn tracecmd_close(handle: *mut tracecmd_input);
}
extern "C" {
    pub fn tracecmd_init_data(handle: *mut tracecmd_input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_read_cpu_first(
        handle: *mut tracecmd_input,
        cpu: ::std::os::raw::c_int,
    ) -> *mut tep_record;
}
extern "C" {
    pub fn tracecmd_read_data(
        handle: *mut tracecmd_input,
        cpu: ::std::os::raw::c_int,
    ) -> *mut tep_record;
}
extern "C" {
    pub fn tracecmd_read_at(
        handle: *mut tracecmd_input,
        offset: ::std::os::raw::c_ulonglong,
        cpu: *mut ::std::os::raw::c_int,
    ) -> *mut tep_record;
}
extern "C" {
    pub fn tracecmd_free_record(record: *mut tep_record);
}
extern "C" {
    pub fn tracecmd_get_tep(handle: *mut tracecmd_input) -> *mut tep_handle;
}
extern "C" {
    pub fn tracecmd_get_traceid(handle: *mut tracecmd_input) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn tracecmd_get_guest_cpumap(
        handle: *mut tracecmd_input,
        trace_id: ::std::os::raw::c_ulonglong,
        name: *mut *const ::std::os::raw::c_char,
        vcpu_count: *mut ::std::os::raw::c_int,
        cpu_pid: *mut *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_get_first_ts(handle: *mut tracecmd_input) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn tracecmd_add_ts_offset(handle: *mut tracecmd_input, offset: ::std::os::raw::c_longlong);
}
extern "C" {
    pub fn tracecmd_buffer_instances(handle: *mut tracecmd_input) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_buffer_instance_name(
        handle: *mut tracecmd_input,
        indx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tracecmd_buffer_instance_handle(
        handle: *mut tracecmd_input,
        indx: ::std::os::raw::c_int,
    ) -> *mut tracecmd_input;
}
extern "C" {
    pub fn tracecmd_set_private(handle: *mut tracecmd_input, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tracecmd_get_private(handle: *mut tracecmd_input) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tracecmd_follow_event(
        handle: *mut tracecmd_input,
        system: *const ::std::os::raw::c_char,
        event_name: *const ::std::os::raw::c_char,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                handle: *mut tracecmd_input,
                arg1: *mut tep_event,
                arg2: *mut tep_record,
                arg3: ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_iterate_events(
        handle: *mut tracecmd_input,
        cpus: *mut cpu_set_t,
        cpu_size: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                handle: *mut tracecmd_input,
                arg1: *mut tep_record,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_iterate_events_multi(
        handles: *mut *mut tracecmd_input,
        nr_handles: ::std::os::raw::c_int,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                handle: *mut tracecmd_input,
                arg1: *mut tep_record,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_set_loglevel(level: tep_loglevel);
}
pub const tracecmd_filters_TRACECMD_FILTER_NONE: tracecmd_filters = -99972;
pub const tracecmd_filters_TRACECMD_FILTER_NOT_FOUND: tracecmd_filters = -99974;
pub const tracecmd_filters_TRACECMD_FILTER_MISS: tracecmd_filters = -99971;
pub const tracecmd_filters_TRACECMD_FILTER_MATCH: tracecmd_filters = 0;
pub type tracecmd_filters = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracecmd_filter {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracecmd_filter_add(
        handle: *mut tracecmd_input,
        filter_str: *const ::std::os::raw::c_char,
        neg: bool,
    ) -> *mut tracecmd_filter;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracecmd_cpu_map {
    _unused: [u8; 0],
}
extern "C" {
    pub fn tracecmd_map_vcpus(
        handles: *mut *mut tracecmd_input,
        nr_handles: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_get_cpu_map(
        handle: *mut tracecmd_input,
        cpu: ::std::os::raw::c_int,
    ) -> *mut tracecmd_cpu_map;
}
extern "C" {
    pub fn tracecmd_map_find_by_host_pid(
        handle: *mut tracecmd_input,
        host_pid: ::std::os::raw::c_int,
    ) -> *mut tracecmd_cpu_map;
}
extern "C" {
    pub fn tracecmd_map_get_guest(map: *mut tracecmd_cpu_map) -> *mut tracecmd_input;
}
extern "C" {
    pub fn tracecmd_map_get_host_pid(map: *mut tracecmd_cpu_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tracecmd_map_set_private(map: *mut tracecmd_cpu_map, priv_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tracecmd_map_get_private(map: *mut tracecmd_cpu_map) -> *mut ::std::os::raw::c_void;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct re_dfa_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
